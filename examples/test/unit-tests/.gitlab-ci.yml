# Example GitLab CI configuration for unit testing
# This example demonstrates efficient unit testing pipeline configuration

stages:
  - test

variables:
  # Common configuration variables
  CACHE_DIR: node_modules/
  TEST_REPORTS_DIR: reports/
  COVERAGE_DIR: coverage/

.test_template: &test_template
  stage: test
  image: node:16-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}
  before_script:
    - npm ci --cache .npm --prefer-offline
    - mkdir -p ${TEST_REPORTS_DIR} ${COVERAGE_DIR}
  artifacts:
    when: always
    reports:
      junit: ${TEST_REPORTS_DIR}/*.xml
      coverage_report:
        coverage_format: cobertura
        path: ${COVERAGE_DIR}/cobertura-coverage.xml
    paths:
      - ${TEST_REPORTS_DIR}
      - ${COVERAGE_DIR}
    expire_in: 1 week

# Run unit tests with coverage reporting
unit_tests:
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Run tests in parallel by splitting the test suite
unit_tests:split:1:
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit --shard=1/3
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $RUN_PARALLEL_TESTS == "true"

unit_tests:split:2:
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit --shard=2/3
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $RUN_PARALLEL_TESTS == "true"

unit_tests:split:3:
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit --shard=3/3
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $RUN_PARALLEL_TESTS == "true"

# Test matrix job - runs tests across multiple Node.js versions
.node_matrix:
  parallel:
    matrix:
      - NODE_VERSION: ["14", "16", "18"]
  image: node:${NODE_VERSION}-alpine
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $RUN_MATRIX_TESTS == "true"

# Only run specific tests in specific situations
quick_tests:
  <<: *test_template
  script:
    - npm run test:unit -- --ci --reporters=default --reporters=jest-junit --testPathIgnorePatterns=integration
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[quick-tests\]/
    - if: $CI_PIPELINE_SOURCE == "schedule"

# Create test summary report to display in Merge Request
test_summary:
  stage: test
  image: alpine:latest
  needs:
    - job: unit_tests
      artifacts: true
  script:
    - echo "Test Summary Report"
    - cat ${TEST_REPORTS_DIR}/*.xml | grep -o 'failures="[0-9]*"' | sed 's/failures="/Failed tests: /'
    - cat ${TEST_REPORTS_DIR}/*.xml | grep -o 'tests="[0-9]*"' | sed 's/tests="/Total tests: /'
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"